{"version":3,"sources":["services/movieData.js","services/movieAPI.js","components/Loading.js","components/MovieForm.js","components/MovieCard.js","pages/EditMovie.js","pages/MovieDetails.js","pages/MovieList.js","pages/NewMovie.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["movies","id","title","subtitle","storyline","rating","imagePath","bookmarked","genre","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","simulateRequest","response","callback","setTimeout","getMovie","movieId","movie","find","mov","parseInt","Promise","resolve","deleteMovie","filter","status","Loading","className","Component","MovieForm","props","state","handleSubmit","bind","onSubmit","this","field","newValue","setState","htmlFor","placeholder","type","value","onChange","event","updateMovie","target","step","min","max","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","React","MovieCard","data-testid","src","alt","to","EditMovie","shouldRedirect","fetchMovie","match","console","log","params","updatedMovie","map","movieAPI","MovieDetails","isLoading","MovieList","fetchMovies","key","NewMovie","newMovie","movieData","nextId","length","NotFound","App","exact","path","component","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0474de77.chunk.js","sourcesContent":["const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nconst TIMEOUT = 2000;\nconst SUCCESS_STATUS = 'OK';\n\n// --------------------------------------------------------------------\n// A função simulateRequest simula uma requisição para uma API externa\n// Esse tipo de função que \"chama outra função\" é chamada de\n// \"currying function\" https://javascript.info/currying-partials\n// não se preocupe, estudaremos isso mais futuramente\n// --------------------------------------------------------------------\n\nconst simulateRequest = (response) => (callback) => {\n  setTimeout(() => {\n    callback(response);\n  }, TIMEOUT);\n};\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    const movies = readMovies();\n    simulateRequest(movies)(resolve);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n  return new Promise((resolve) => {\n    simulateRequest(movie)(resolve);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => (\n  new Promise((resolve) => {\n    const movies = readMovies().map((movie) => {\n      if (movie.id === parseInt(updatedMovie.id, 10)) {\n        return { ...movie, ...updatedMovie };\n      }\n      return movie;\n    });\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const createMovie = (movieData) => (\n  new Promise((resolve) => {\n    let movies = readMovies();\n    const nextId = movies[movies.length - 1].id + 1;\n    const newMovie = { ...movieData, id: nextId };\n    movies = [...movies, newMovie];\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    simulateRequest({ status: SUCCESS_STATUS })(resolve);\n  });\n};\n","import React, { Component } from 'react';\n// import PropTypes from 'prop-types';\n\nclass Loading extends Component {\n  render() {\n    // const { loadingMessage } = this.props;\n\n    return <h1 className=\"loading\">Carregando...</h1>;\n  }\n}\n\n// Loading.propTypes = {\n//   loadingMessage: PropTypes.string.isRequired,\n// };\n\nexport default Loading;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_title\" className=\"input\">\n          <input\n            placeholder=\"Insira o título\"\n            id=\"movie_title\"\n            type=\"text\"\n            className=\"validate\"\n            value={ title }\n            onChange={ (event) => this.updateMovie('title', event.target.value) }\n          />\n          Título\n        </label>\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_subtitle\" className=\"input\">\n          <input\n            placeholder=\"Insira o subtítulo\"\n            id=\"movie_subtitle\"\n            type=\"text\"\n            value={ subtitle }\n            onChange={ (event) => this.updateMovie('subtitle', event.target.value) }\n          />\n          Subtítulo\n        </label>\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"row\">\n        <label htmlFor=\"movie_image\" className=\"input\">\n          <input\n            placeholder=\"Insira o caminho da imagem\"\n            id=\"movie_image\"\n            type=\"text\"\n            value={ imagePath }\n            onChange={ (event) => this.updateMovie('imagePath', event.target.value) }\n          />\n          Imagem\n        </label>\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_storyline\" className=\"input\">\n          <textarea\n            id=\"movie_storyline\"\n            value={ storyline }\n            onChange={ (event) => this.updateMovie('storyline', event.target.value) }\n          />\n          Sinopse\n        </label>\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"movie_genre\" className=\"input\">\n          <select\n            id=\"movie_genre\"\n            value={ genre }\n            onChange={ (event) => this.updateMovie('genre', event.target.value) }\n          >\n            <option value=\"action\">Ação</option>\n            <option value=\"comedy\">Comédia</option>\n            <option value=\"thriller\">Suspense</option>\n            <option value=\"fantasy\">Fantasia</option>\n          </select>\n          Gênero\n        </label>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"movie_rating\" className=\"input\">\n          <input\n            placeholder=\"Dê a avaliação do filme\"\n            id=\"movie_rating\"\n            type=\"number\"\n            step={ 0.1 }\n            min={ 0 }\n            max={ 5 }\n            value={ rating }\n            onChange={ (event) => this.updateMovie('rating', event.target.value) }\n          />\n          Avaliação\n        </label>\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div className=\"input\">\n        <button\n          type=\"button\"\n          onClick={ this.handleSubmit }\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <form className=\"movie-from\">\n          {this.renderTitleInput()}\n          {this.renderSubtitleInput()}\n          {this.renderImagePathInput()}\n          {this.renderStorylineInput()}\n          {this.renderGenreSelection()}\n          {this.renderRatingInput()}\n          {this.renderSubmitButton()}\n        </form>\n      </div>\n    );\n  }\n}\n\nMovieForm.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    imagePath: PropTypes.string,\n    storyline: PropTypes.string,\n  }).isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default MovieForm;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    const { title, storyline, id, imagePath } = movie;\n    return (\n      <div className=\"movie-card\" data-testid=\"movie-card\">\n        <div className=\"image-box\">\n          <img src={ imagePath } alt=\"banner\" />\n          <h1>{ title }</h1>\n        </div>\n        <div className=\"text-box\">\n          <p>{ storyline }</p>\n        </div>\n        <div className=\"link-box\">\n          <Link to={ `/movies/${id}` }>VER DETALHES</Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    imagePath: PropTypes.string,\n    storyline: PropTypes.string,\n  }),\n}.isRequired;\n\nexport default MovieCard;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport * as movieAPI from '../services/movieAPI';\nimport { MovieForm } from '../components';\nimport Loading from '../components/Loading';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movie: '',\n      status: 'loading',\n      shouldRedirect: false,\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.fetchMovie = this.fetchMovie.bind(this);\n  }\n\n  componentDidMount() {\n    const { match } = this.props;\n    this.fetchMovie();\n\n    console.log(match.params);\n  }\n\n  handleSubmit(updatedMovie) {\n    movieAPI.updateMovie(updatedMovie);\n    this.setState({ shouldRedirect: true });\n  }\n\n  async fetchMovie() {\n    const { match } = this.props;\n    const movie = await movieAPI.getMovie(match.params.id);\n\n    this.setState({ movie, status: 'loaded' });\n  }\n\n  render() {\n    const { status, shouldRedirect, movie } = this.state;\n    if (shouldRedirect) {\n      return <Redirect to=\"/\" />;\n    }\n\n    if (status === 'loading') return <Loading />;\n\n    return (\n      <div data-testid=\"edit-movie\">\n        <MovieForm movie={ movie } onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\n\nEditMovie.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default EditMovie;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\n\nclass MovieDetails extends Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchMovie = this.fetchMovie.bind(this);\n\n    this.state = {\n      title: '',\n      storyline: '',\n      imagePath: '',\n      genre: '',\n      rating: '',\n      subtitle: '',\n      isLoading: true,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchMovie();\n  }\n\n  async fetchMovie() {\n    const { match } = this.props;\n    const { params } = match;\n    const movie = await movieAPI.getMovie(params.id);\n    const { id, title, storyline, imagePath, genre, rating, subtitle } = movie;\n\n    this.setState({\n      id,\n      title,\n      storyline,\n      imagePath,\n      genre,\n      rating,\n      subtitle,\n      isLoading: false,\n    });\n  }\n\n  async deleteMovie(movieId) {\n    await movieAPI.deleteMovie(movieId);\n  }\n\n  render() {\n    const { isLoading } = this.state;\n    if (isLoading === true) return <Loading />;\n    const { id, title, storyline, imagePath, genre, rating, subtitle } = this.state;\n    return (\n      <div className=\"movie-details\" data-testid=\"movie-details\">\n        <img alt=\"Movie Cover\" src={ `../${imagePath}` } />\n        <p>{ `Title: ${title}` }</p>\n        <p>{ `Subtitle: ${subtitle}` }</p>\n        <p>{ `Storyline: ${storyline}` }</p>\n        <p>{ `Genre: ${genre}` }</p>\n        <p>{ `Rating: ${rating}` }</p>\n        <div className=\"details-links\">\n          <Link to=\"/\">VOLTAR</Link>\n          <Link to={ `/movies/${id}/edit` }>EDITAR</Link>\n          <Link to=\"/\" onClick={ () => this.deleteMovie(id) }>DELETAR</Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nMovieDetails.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default MovieDetails;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport * as movieAPI from '../services/movieAPI';\nimport MovieCard from '../components/MovieCard';\nimport Loading from '../components/Loading';\n\nclass MovieList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchMovies = this.fetchMovies.bind(this);\n\n    this.state = {\n      movies: [],\n      isLoading: true,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchMovies();\n  }\n\n  async fetchMovies() {\n    const movies = await movieAPI.getMovies();\n\n    this.setState({\n      movies,\n      isLoading: false,\n    });\n  }\n\n  render() {\n    const { movies, isLoading } = this.state;\n\n    if (isLoading === true) return <Loading />;\n\n    return (\n      <main data-testid=\"movie-list\">\n        <div id=\"movie-list\">\n          {movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />)}\n        </div>\n        <div className=\"add-div\">\n          <Link to=\"/movies/new\">ADICIONAR CARTÃO</Link>\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default MovieList;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { shouldRedirect: false };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(newMovie) {\n    movieAPI.createMovie(newMovie);\n\n    this.setState({ shouldRedirect: true });\n  }\n\n  render() {\n    const { shouldRedirect } = this.state;\n\n    if (shouldRedirect) return <Redirect to=\"/\" />;\n\n    return (\n      <div id=\"new-movie-page\" data-testid=\"new-movie\">\n        <MovieForm onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\n\nexport default NewMovie;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div data-testid=\"404-error\">Página não encontrada</div>;\n  }\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { HashRouter as BrowserRouter, Route, Switch } from 'react-router-dom';\nimport {\n  MovieList,\n  MovieDetails,\n  NewMovie,\n  EditMovie,\n  NotFound,\n} from './pages/index';\nimport './App.css';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/\" component={ MovieList } />\n        <Route path=\"/movies/new\" component={ NewMovie } />\n        <Route path=\"/movies/:id/edit\" render={ (props) => <EditMovie { ...props } /> } />\n        <Route path=\"/movies/:id\" render={ (props) => <MovieDetails { ...props } /> } />\n        <Route component={ NotFound } />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}